[{"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mistral 7B Instruct", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T17:47:19.488000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"aqua_service_model": "ocid1.datasciencemodel.oc1.iad.xxxx#llama2", "license": "Apache", "task": "text_generation", "organization": "Meta AI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "ModelArtifacts", "value": ".model-ignore, score.py, runtime.yaml, output_schema.json, input_schema.json, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "training environment"}, {"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "training environment"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "training environment"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "training profile"}, {"key": "ClientLibrary", "value": "ADS", "category": "other"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "training environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "training environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "other"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact1", "description": "model by reference storage path", "category": "other"}], "definedMetadataList": [{"key": "UseCaseType", "value": "multinomial_classification"}, {"key": "Algorithm", "value": "None"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}, {"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mock service model 2", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T17:57:39.158000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"aqua_service_model": "ocid1.datasciencemodel.oc1.iad.xxxx#gpt-4", "license": "MIT", "task": "text_generation", "organization": "OpenAI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "ModelArtifacts", "value": ".model-ignore, score.py, runtime.yaml, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "Training Environment"}, {"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "Training Environment"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "Training Environment"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "Training Profile"}, {"key": "ClientLibrary", "value": "ADS", "category": "Other"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "Training Environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "Training Environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "Other"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact2", "description": "model by reference storage path", "category": "other"}], "definedMetadataList": [{"key": "UseCaseType", "value": "multinomial_classification"}, {"key": "FrameworkVersion"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}, {"key": "Hyperparameters"}, {"key": "Algorithm", "value": "None"}, {"key": "Framework"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}, {"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mock fine tuned model 2", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T19:20:57.856000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"license": "MIT", "task": "text_generation", "aqua_fine_tuned_model": "ocid1.datasciencemodel.oc1.iad.xxxx#gpt-4", "organization": "OpenAI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "Training Environment"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "Training Environment"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact_fine_tuned_2", "description": "model by reference storage path", "category": "other"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "Training Profile"}, {"key": "ModelArtifacts", "value": ".model-ignore, test_json_output.json, score.py, runtime.yaml, output_schema.json, input_schema.json, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "Training Environment"}, {"key": "ClientLibrary", "value": "ADS", "category": "Other"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "Training Environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "Training Environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "Other"}], "definedMetadataList": [{"key": "Hyperparameters"}, {"key": "Algorithm", "value": "None"}, {"key": "FrameworkVersion"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}, {"key": "Framework"}, {"key": "UseCaseType", "value": "multinomial_classification"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}, {"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mock copy of service model 2", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T19:25:59.785000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"license": "MIT", "task": "text_generation", "organization": "OpenAI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "Training Environment"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "Training Environment"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact2", "description": "model by reference storage path", "category": "other"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "Training Profile"}, {"key": "ModelArtifacts", "value": ".model-ignore, test_json_output.json, score.py, runtime.yaml, output_schema.json, input_schema.json, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "Training Environment"}, {"key": "ClientLibrary", "value": "ADS", "category": "Other"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "Training Environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "Training Environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "Other"}], "definedMetadataList": [{"key": "Hyperparameters"}, {"key": "Algorithm", "value": "None"}, {"key": "FrameworkVersion"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}, {"key": "Framework"}, {"key": "UseCaseType", "value": "multinomial_classification"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}, {"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mock copy of service model 1", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T19:30:39.452000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"license": "Apache", "task": "text_generation", "organization": "Meta AI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "Training Environment"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "Training Environment"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact1", "description": "model by reference storage path", "category": "other"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "Training Profile"}, {"key": "ModelArtifacts", "value": ".model-ignore, test_json_output.json, score.py, runtime.yaml, output_schema.json, input_schema.json, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "Training Environment"}, {"key": "ClientLibrary", "value": "ADS", "category": "Other"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "Training Environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "Training Environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "Other"}], "definedMetadataList": [{"key": "Hyperparameters"}, {"key": "Algorithm", "value": "None"}, {"key": "FrameworkVersion"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}, {"key": "Framework"}, {"key": "UseCaseType", "value": "multinomial_classification"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}, {"id": "ocid1.datasciencemodel.oc1.iad.xxxx", "compartmentId": "ocid1.compartment.oc1..xxxx", "projectId": "ocid1.datascienceproject.oc1.iad.xxxx", "displayName": "Mock fine tuned model 1", "lifecycleState": "ACTIVE", "timeCreated": "2024-01-19T19:33:58.078000Z", "createdBy": "ocid1.datasciencenotebooksession.oc1.iad.xxxx", "freeformTags": {"license": "Apache", "task": "text_generation", "aqua_fine_tuned_model": "ocid1.datasciencemodel.oc1.iad.xxxx#llama2", "organization": "Meta AI", "OCI_AQUA": ""}, "customMetadataList": [{"key": "EnvironmentType", "value": "data_science", "description": "The conda environment type, can be published or datascience.", "category": "Training Environment"}, {"key": "CondaEnvironment", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The conda environment where the model was trained.", "category": "Training Environment"}, {"key": "Object Storage Path", "value": "oci://ming-dev@ociodscdev/aqua/model_artifact_fine_tuned_1", "description": "model by reference storage path", "category": "other"}, {"key": "ModelSerializationFormat", "value": "pkl", "description": "The model serialization format.", "category": "Training Profile"}, {"key": "ModelArtifacts", "value": ".model-ignore, test_json_output.json, score.py, runtime.yaml, output_schema.json, input_schema.json, model.pkl, icon.txt", "description": "The list of files located in artifacts folder.", "category": "Training Environment"}, {"key": "ClientLibrary", "value": "ADS", "category": "Other"}, {"key": "SlugName", "value": "automlx234_p38_cpu_x86_64_v1", "description": "The slug name of the training conda environment.", "category": "Training Environment"}, {"key": "CondaEnvironmentPath", "value": "oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1", "description": "The URI of the training conda environment.", "category": "Training Environment"}, {"key": "ModelFileName", "value": "model.pkl", "description": "The model file name.", "category": "Other"}], "definedMetadataList": [{"key": "Hyperparameters"}, {"key": "Algorithm", "value": "None"}, {"key": "FrameworkVersion"}, {"key": "ArtifactTestResults", "value": "{\"score_py\": {\"key\": \"score_py\", \"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"score.py\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'score.py' is missing.\", \"success\": true}, \"runtime_yaml\": {\"category\": \"Mandatory Files Check\", \"description\": \"Check that the file \\\"runtime.yaml\\\" exists and is in the top level directory of the artifact directory\", \"error_msg\": \"The file 'runtime.yaml' is missing.\", \"success\": true}, \"score_syntax\": {\"category\": \"score.py\", \"description\": \"Check for Python syntax errors\", \"error_msg\": \"There is Syntax error in score.py: \", \"success\": true}, \"score_load_model\": {\"category\": \"score.py\", \"description\": \"Check that load_model() is defined\", \"error_msg\": \"Function load_model is not present in score.py.\", \"success\": true}, \"score_predict\": {\"category\": \"score.py\", \"description\": \"Check that predict() is defined\", \"error_msg\": \"Function predict is not present in score.py.\", \"success\": true}, \"score_predict_data\": {\"category\": \"score.py\", \"description\": \"Check that the only required argument for predict() is named \\\"data\\\"\", \"error_msg\": \"The predict function in score.py must have a formal argument named 'data'.\", \"success\": true}, \"score_predict_arg\": {\"category\": \"score.py\", \"description\": \"Check that all other arguments in predict() are optional and have default values\", \"error_msg\": \"All formal arguments in the predict function must have default values, except that 'data' argument.\", \"success\": true}, \"runtime_version\": {\"category\": \"runtime.yaml\", \"description\": \"Check that field MODEL_ARTIFACT_VERSION is set to 3.0\", \"error_msg\": \"In runtime.yaml, the key MODEL_ARTIFACT_VERSION must be set to 3.0.\", \"success\": true}, \"runtime_env_python\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION is set to a value of 3.6 or higher\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_PYTHON_VERSION must be set to a value of 3.6 or higher.\", \"success\": true, \"value\": \"3.8\"}, \"runtime_env_path\": {\"category\": \"conda_env\", \"description\": \"Check that field MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is set\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH must have a value.\", \"success\": true, \"value\": \"oci://service-conda-packs@id19sfcrra6z/service_pack/cpu/Oracle_AutoMLx_v23.4_for_CPU_on_Python_3.8/1.0/automlx234_p38_cpu_x86_64_v1\"}, \"runtime_path_exist\": {\"category\": \"conda_env\", \"description\": \"Check that the file path in MODEL_DEPLOYMENT.INFERENCE_ENV_PATH is correct.\", \"error_msg\": \"In runtime.yaml, the key MODEL_DEPLOYMENT.INFERENCE_ENV_PATH does not exist.\", \"success\": true}}"}, {"key": "Framework"}, {"key": "UseCaseType", "value": "multinomial_classification"}], "inputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 40.2, \"standard deviation\": 33.77309909117347, \"sample minimum\": 3.0, \"lower quartile\": 14.75, \"median\": 29.5, \"upper quartile\": 69.5, \"sample maximum\": 94.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}", "outputSchema": "{\"schema\": [{\"dtype\": \"int64\", \"feature_type\": \"Integer\", \"name\": 0, \"domain\": {\"values\": \"Integer\", \"stats\": {\"count\": 10.0, \"mean\": 2642.6, \"standard deviation\": 3482.95000123618, \"sample minimum\": 9.0, \"lower quartile\": 219.25, \"median\": 872.5, \"upper quartile\": 5227.0, \"sample maximum\": 8836.0}, \"constraints\": []}, \"required\": true, \"description\": \"0\", \"order\": 0}], \"version\": \"1.1\"}"}]