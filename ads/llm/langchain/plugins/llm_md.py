#!/usr/bin/env python
# -*- coding: utf-8 -*--

# Copyright (c) 2023 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/

import logging
from typing import Any, Dict, List, Optional, Mapping

import requests
from langchain.callbacks.manager import CallbackManagerForLLMRun
from ads.llm.langchain.plugins.base import BaseLLM
from ads.llm.langchain.plugins.contant import (
    DEFAULT_CONTENT_TYPE_JSON,
    DEFAULT_TIME_OUT,
)

logger = logging.getLogger(__name__)


class OCIModelDeployment(BaseLLM):
    """Base class for OCI Model Deployment Endpoint model."""

    endpoint: str = None
    """The uri of the endpoint from the deployed Model Deployment model."""

    best_of: int = 1
    """Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). """

    @property
    def _identifying_params(self) -> Mapping[str, Any]:
        """Get the identifying parameters."""
        return {
            **{"endpoint": self.endpoint},
            **self._default_params,
        }

    def _call(
        self,
        prompt: str,
        stop: Optional[List[str]] = None,
        run_manager: Optional[CallbackManagerForLLMRun] = None,
        **kwargs: Any,
    ) -> str:
        """Call out to OCI Data Science Model Deployment TGI endpoint.

        Parameters
        ----------
        prompt (str):
            The prompt to pass into the model.
        stop (List[str], Optional):
            List of stop words to use when generating.

        Returns
        -------
            The string generated by the model.

        Example
        -------

            .. code-block:: python

                response = oci_md("Tell me a joke.")

        """
        params = self._invocation_params(stop, **kwargs)
        body = self._construct_json_body(prompt, params)
        response = self.send_request(
            data=body, endpoint=self.endpoint, timeout=DEFAULT_TIME_OUT
        )

        return str(response.get("generated_text", response))

    def send_request(
        self,
        data,
        endpoint: str,
        header: dict = None,
        **kwargs,
    ) -> Dict:
        """Sends request to the model deployment endpoint.

        Parameters
        ----------
        data (Json serializable):
            data need to be sent to the endpoint.
        endpoint (str):
            The model HTTP endpoint.
        header (dict, optional):
            A dictionary of HTTP headers to send to the specified url. Defaults to {}.

        Raises
        ------
        Exception:
            Raise when invoking fails.

        Returns
        -------
            A JSON representation of a requests.Response object.
        """
        if not header:
            header = {}
        header["Content-Type"] = (
            header.pop("content_type", DEFAULT_CONTENT_TYPE_JSON)
            or DEFAULT_CONTENT_TYPE_JSON
        )
        request_kwargs = {"json": data}
        request_kwargs["headers"] = header
        request_kwargs["auth"] = self.auth.get("signer")

        try:
            response = requests.post(endpoint, **request_kwargs, **kwargs)
            response_json = response.json()

        except Exception:
            response = requests.post(endpoint, **request_kwargs, **kwargs)
            logger.error(
                f"DEBUG INFO: request_kwargs={request_kwargs},"
                f"status_code={response.status_code}, "
                f"content={response._content}"
            )
            raise

        return response_json

    def _construct_json_body(self, prompt, params):
        """Needs to be implemented in different framework."""
        raise NotImplementedError


class ModelDeploymentTGI(OCIModelDeployment):
    """OCI Data Science Model Deployment TGI Endpoint.

    Example
    -------

        .. code-block:: python

            from ads.llm import ModelDeploymentTGI

            oci_md = ModelDeploymentTGI(endpoint="<url_of_model_deployment_endpoint>")

    """

    do_sample: bool = True
    """if set to True, this parameter enables decoding strategies such as multinomial sampling, beam-search multinomial sampling, Top-K sampling and Top-p sampling. """

    watermark = True

    return_full_text = False

    @property
    def _llm_type(self) -> str:
        """Return type of llm."""
        return "oci_model_deployment_tgi_endpoint"

    @property
    def _default_params(self) -> Dict[str, Any]:
        """Get the default parameters for invoking OCI model deployment TGI endpoint."""
        return {
            "best_of": self.best_of,
            "max_new_tokens": self.max_tokens,
            "temperature": self.temperature,
            "top_k": self.k
            if self.k > 0
            else None,  # `top_k` must be strictly positive'
            "top_p": self.p,
            "do_sample": self.do_sample,
            "return_full_text": self.return_full_text,
            "watermark": self.watermark,
        }

    def _invocation_params(self, stop: Optional[List[str]], **kwargs: Any) -> dict:
        params = self._default_params
        if self.stop is not None and stop is not None:
            raise ValueError("`stop` found in both the input and default params.")
        elif self.stop is not None:
            params["stop"] = self.stop
        elif stop is not None:
            params["stop"] = stop
        else:  # don't set stop in param as None. TGI not accept stop=null.
            pass
        return {**params, **kwargs}

    def _construct_json_body(self, prompt, params):
        return {
            "inputs": prompt,
            "parameters": params,
        }


class ModelDeploymentvLLM(OCIModelDeployment):
    """Not support yet."""

    pass
